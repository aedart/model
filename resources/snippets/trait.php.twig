{{ '<?php' }} namespace Aedart\Model\Traits\Strings;

/**
 * <h1>Deleted At Trait</h1>
 *
 * @see \Aedart\Model\Contracts\Strings\DeletedAtAware
 *
 * @author Alin Eugen Deac <aedart@gmail.com>
 * @package Aedart\Model\Traits\Strings
 */
trait XXXXXAtTrait {

    /**
     * {{ propertyDescription }}
     *
     * @var {{ dataType }}|null
     */
    protected ${{ coreProperty }} = null;

    /**
     * Set the given deleted at
     *
     * @param {{ dataType }} $date Date of when this component, entity or resource was deleted
     *
     * @return void
     */
    public function setDeletedAt($date) {
        $this->{{ coreProperty }} = (string) $date;
    }

    /**
     * Get the given deleted at
     *
     * If no deleted at has been set, this method will
     * set and return a default deleted at, if any such
     * value is available
     *
     * @see getDefaultDeletedAt()
     *
     * @return {{ dataType }}|null deleted at or null if none deleted at has been set
     */
    public function getDeletedAt() {
        if (!$this->hasDeletedAt() && $this->hasDefaultDeletedAt()) {
            $this->setDeletedAt($this->getDefaultDeletedAt());
        }
        return $this->{{ coreProperty }};
    }

    /**
     * Get a default deleted at value, if any is available
     *
     * @return {{ dataType }}|null A default deleted at value or Null if no default value is available
     */
    public function getDefaultDeletedAt() {
        return null;
    }

    /**
     * Check if deleted at has been set
     *
     * @return bool True if deleted at has been set, false if not
     */
    public function hasDeletedAt() {
        return isset($this->{{ coreProperty }});
    }

    /**
     * Check if a default deleted at is available or not
     *
     * @return bool True of a default deleted at is available, false if not
     */
    public function hasDefaultDeletedAt() {
        $default = $this->getDefaultDeletedAt();
        return isset($default);
    }
}